<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="orm.mybatis.mapper.bookMapper">
	<select id="bookList" parameterType="map" resultType="java.util.Map"> <!--알리야스명으로 map 으로 쓸 수 있음. 이것은 java.util.Map와 같은 뜻 -->
		SELECT book_no, book_title, book_img, book_author, book_publish, book_date, book_price
		 FROM ajax_book
		<where>	
			<if test='book_title != null and choMode.equals("N")'> <!--book_title컬럼에 대해 null인지 확인한다. -->
			 and book_title LIKE '%'||#{book_title}||'%'
			</if>
			<if test='book_title != null and choMode.equals("Y")'><!--maBatis 문법이기떄문에 Y를 더블쿼테이션으로 감쌌다.  -->
			 and fn_choseong(book_title) LIKE '%'||#{book_title}||'%'
			</if>
		</where>
			ORDER BY book_title asc
	</select>
</mapper>

<!-- 이 sql문의 id가 getBookList라는 것을 확인할 수 있고, parameterType이 map인 것을 확인할 수 있다. 여기서 파라티머 타입이 map이기 때문에 좀 전에 dao에서 selectList(“getBookList”, pMap) 이렇게 pMap을 넣어줄 수 있었던 것이다.(타입을 꼭 맞춰야 한다는 말이다)
그러면 이제 where절을 확인해야 한다.
파라미터로 pMap을 넘겨줬기 때문에 여기서도 사용자가 입력한 문자열과 choMode가 Y인지, N인지 알고 있다. MyBatis를 사용하고 있기 때문에 가능한 것이다. Map에 키 값으로 book_title과 choMode를 설정하고 값을 넘겨주었을 뿐인데 이렇게 알아서 다 감지한다.
where절 안에 첫 번째 if를 보면
book_title이 null이 아니고, choMode가 N이라면  book_title에  #{book_title}이 포함되는지 검사한다. 여기서 첫 번째 book_title은 오라클의 컬럼명이고, 두 번째 book_title은 사용자가 입력한 값(파라미터로 받아온 값)이다. 
그러니까 WHERE book_title = ‘사용자입력값’ 이렇게 동작 되는 것이다. db연동 할 때 정해지지 않은 값을 ?로 두고 pstmt.setString(인덱스, 값);을 했었는데, 여기서는 정해지지 않은 값의 자리에  #{넣어줄 값} 이렇게 작성해주면 된다.
그렇게 sql문이 완성 되고, 결과를 받아와서 Dao의 bList에 채워질 것이다. 그러면 그 반환 값으로 인해 htmlBookList.jsp의 bList에도 조회 결과가 채워진다. htmlBookList.jsp에서는 조회 결과를 테이블로 나타내준다. 그렇게 결과가 나타나는 것이다.
 -->